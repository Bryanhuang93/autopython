1.	When a Python executes a program, Python reads the .py into memory, and parses it in order to get a bytecode, then goes on to execute. For each module that is imported by the program, Python first checks to see whether there is a precompiled bytecode version, in a .pyo or .pyc, that has a timestamp which corresponds to its .py file. Python uses the bytecode version if any. Otherwise, it parses the module's .py file, saves it into a .pyc file, and uses the bytecode it just created.
Byte code files are also one way of shipping Python codes. Python will still run a program 2014 if all it can find are .pyc files, even if the original .py source files are not there.
2.	Once our program has been compiled into byte code, it is shipped off for execution to Python Virtual Machine (PVM). Actually, the PVM is just a big loop that iterates through our byte code instruction, one by one, to carry out their operations. The PVM is the runtime engine of Python.
3.	The compiler is always 2014 right there at runtime and is part of the system that runs the program. All we have in Python is runtime. There is no initial compile-time phase at all and everything happens as the program is running.
4.	It is possible to turn our Python programs into true executables. This is known as frozen binaries. Frozen binaries bundles together the byte code of our program files, along with the PVM interpreter and any Python 2014 support files our program needs, into a single package, a single binary executable program like .exe file on Windows.
